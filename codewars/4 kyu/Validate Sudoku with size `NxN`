Ссылка: 

https://www.codewars.com/kata/540afbe2dc9f615d5e000425/python

DESCRIPTION:
Given a Sudoku data structure with size NxN, N > 0 and √N == integer, write a method to validate if it has been filled out correctly.

The data structure is a multi-dimensional Array, i.e:

[
  [7,8,4,  1,5,9,  3,2,6],
  [5,3,9,  6,7,2,  8,4,1],
  [6,1,2,  4,3,8,  7,5,9],
  
  [9,2,8,  7,1,5,  4,6,3],
  [3,5,7,  8,4,6,  1,9,2],
  [4,6,1,  9,2,3,  5,8,7],
  
  [8,7,6,  3,9,4,  2,1,5],
  [2,4,3,  5,6,1,  9,7,8],
  [1,9,5,  2,8,7,  6,3,4]
]
Rules for validation

Data structure dimension: NxN where N > 0 and √N == integer
Rows may only contain integers: 1..N (N included)
Columns may only contain integers: 1..N (N included)
'Little squares' (3x3 in example above) may also only contain integers: 1..N (N included)


Мое решение:

class Sudoku(object):

    def __init__(self, data):
        self.sudocu = data


    def is_valid(self):
        # Сохраняем N и квадратный корень для формирования миниматриц
        s_size, s_square = len(self.sudocu), int(len(self.sudocu)**0.5)
        # проверка условия числа от 1...N
        set_sudocu = set(range(1,s_size+1))
        if False in [set(i) == set_sudocu for i in self.sudocu]: return False
        # Проверка на пустое судоку и с одним полем
        if s_size < 1: return False
        #проверка N*N
        if False in [len(i)==s_size for i in self.sudocu]: return False
        #Проверка на тип информации
        if False in [ type(j)==type(1) for i in self.sudocu for j in i]: return False
        # Уникальность строк
        if False in [len(set(i))==s_size for i in self.sudocu]: return False
        # Уникальность столбцов
        post_refact = [[i[j] for i in self.sudocu] for j in range(s_size)]
        if False in [len(set(i)) == s_size for i in post_refact]: return False
        #Уникальность мини-матриц
        refactor_square = [ [self.sudocu[c][d] for c in range(j,j+s_square) for d in range(i,i+s_square)] for j in range(0, s_size, s_square) for i in range(0, s_size, s_square)]
        if False in [len(set(i)) == len(refactor_square) for i in refactor_square]: return False

        return True

Лучшее решение:

import math

class Sudoku(object):
    def __init__(self, board):
        self.board = board
        
    def is_valid(self):
        if not isinstance(self.board, list):
            return False
        n = len(self.board)
        rootN = int(round(math.sqrt(n)))
        if rootN * rootN != n:
            return False
        isValidRow = lambda r : (isinstance(r, list) and
                                 len(r) == n and
                                 all(map(lambda x : type(x) == int, r)))
        if not all(map(isValidRow, self.board)):
            return False
        oneToN = set(range(1, n + 1))
        isOneToN = lambda l : set(l) == oneToN
        tranpose = [[self.board[j][i] for i in range(n)] for j in range(n)]
        squares = [[self.board[p+x][q+y] for x in range(rootN) 
                                         for y in range(rootN)] 
                                         for p in range(0, n, rootN)
                                         for q in range(0, n, rootN)] 
        return (all(map(isOneToN, self.board)) and
                all(map(isOneToN, tranpose)) and
                all(map(isOneToN, squares)))